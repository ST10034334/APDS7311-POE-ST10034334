{
	"info": {
		"_postman_id": "b1ef99cd-b68b-434a-a396-a4362a5f655a",
		"name": "RenBank API Tests - Customer",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37378239",
		"_collection_link": "https://solar-trinity-625040.postman.co/workspace/RenBank-Team-Workspace~389b156c-55fa-42a9-8c01-10a80a49b724/collection/37378239-b1ef99cd-b68b-434a-a396-a4362a5f655a?action=share&source=collection_link&creator=37378239"
	},
	"item": [
		{
			"name": "Auth Endpoint",
			"item": [
				{
					"name": "Register Tests",
					"item": [
						{
							"name": "Valid Input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Test 1: Verify status code is 201 (Successful registration)",
											"pm.test(\"Verify status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"//Test 2: Verify response contains insertedId within the 'results' object",
											"pm.test(\"Response contains insertedId\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.results).to.have.property(\"insertedId\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"John Doe\",\n  \"id_number\": \"0109184567198\",\n  \"account_number\": \"784567379\",\n  \"password\": \"JDHandbag90$\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://renbank-api.oa.r.appspot.com/auth/register",
									"protocol": "https",
									"host": [
										"renbank-api",
										"oa",
										"r",
										"appspot",
										"com"
									],
									"path": [
										"auth",
										"register"
									]
								},
								"description": "**Test Objective:** Ensure that a user can successfully register with valid input data.\n\n**Expected Results:**\n\n- Status Code: `201 Created`\n    \n- Response contains a success message and the `insertedId` of the newly created user."
							},
							"response": []
						},
						{
							"name": "Invalid Input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Test 1: Verify status code is 400 (Bad Request) for invalid registration input\r",
											"pm.test(\"Verify status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//Test 2: Verify 'Name is required' error message\r",
											"pm.test(\"Verify 'Name is required' error\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    const nameError = jsonData.errors.find(err => err.path === 'name');\r",
											"    pm.expect(nameError).to.have.property('msg', 'Name is required.');\r",
											"});\r",
											"\r",
											"//Test 3: Verify 'ID number must only contain digits' error message\r",
											"pm.test(\"Verify 'ID number must only contain digits' error\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    const idNumberError = jsonData.errors.find(err => err.path === 'id_number');\r",
											"    pm.expect(idNumberError).to.have.property('msg', 'ID number must only contain digits.');\r",
											"});\r",
											"\r",
											"//Test 4: Verify 'Account number must only contain digits' error message\r",
											"pm.test(\"Verify 'Account number must only contain digits' error\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    const accountNumberError = jsonData.errors.find(err => err.path === 'account_number');\r",
											"    pm.expect(accountNumberError).to.have.property('msg', 'Account number must only contain digits.');\r",
											"});\r",
											"\r",
											"//Test 5: Verify 'Password must be at least 8 characters long' error message\r",
											"pm.test(\"Verify 'Password must be at least 8 characters long' error\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    const passwordError = jsonData.errors.find(err => err.path === 'password');\r",
											"    pm.expect(passwordError).to.have.property('msg', 'Password must be at least 8 characters long.');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"\",\r\n  \"id_number\": \"0109184%ss198\",\r\n  \"account_number\": \"Doe67890\",\r\n  \"password\": \"90$\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://renbank-api.oa.r.appspot.com/auth/register",
									"protocol": "https",
									"host": [
										"renbank-api",
										"oa",
										"r",
										"appspot",
										"com"
									],
									"path": [
										"auth",
										"register"
									]
								},
								"description": "**Test Objective:** Ensure that a user cannot register with invalid input data.\n\n**Expected Results:**\n\n- Status Code: `400 Bad request`\n    \n- Response contains error messages for each invalid input data."
							},
							"response": []
						},
						{
							"name": "Duplicate Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Test 1: Verify status code is 409 (Conflict) for duplicate user registration\r",
											"pm.test(\"Verify status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"//Test 2: Verify response message is \"Registration Failed. Account Number already exists.\"\r",
											"pm.test(\"Response contains appropriate error message\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"message\").eql(\"Registration Failed. Account Number already exists.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Mary Jane\",\r\n  \"id_number\": \"0109184567198\",\r\n  \"account_number\": \"784567379\",\r\n  \"password\": \"MJDoorknob56!\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://renbank-api.oa.r.appspot.com/auth/register",
									"protocol": "https",
									"host": [
										"renbank-api",
										"oa",
										"r",
										"appspot",
										"com"
									],
									"path": [
										"auth",
										"register"
									]
								},
								"description": "**Test Objective:** Ensure that a user cannot register with a duplicate account.\n\n**Expected Results:**\n\n- Status Code: `409 Conflict`\n    \n- Response contains an error messages stating `'Registration Failed. Account Number already exists.'`"
							},
							"response": []
						}
					],
					"description": "This folder contains all the test cases related to the **user registration** (`POST /auth/register`) functionality of the API. The tests in this folder aim to validate that the user registration process works as expected for both **valid and invalid** inputs. It includes tests for:\n\n1. **Valid Registration**: Verifying that a user can successfully register with valid data, and that the system responds with a **201 status code** and returns necessary details like `insertedId`.\n    \n2. **Incorrect Fields**: Testing how the API handles cases where one or more required fields (like `name`, `id_number`, or `password`) are incorrect, expecting the system to return a **400 status code** and an appropriate error message.\n    \n3. **Duplicate Account**: Testing the scenario where a user tries to register with an already existing `account_number`, expecting the API to return a **409 status code**, and an error message (e.g., `Account number already exists`)."
				},
				{
					"name": "Login Tests",
					"item": [
						{
							"name": "Valid Input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Test 1: Verify status code is 200 (Successful login)\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"//Test 2: Verify response contains token\r",
											"pm.test(\"Response contains token\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"token\");\r",
											"});\r",
											"\r",
											"//Test 3: Verify response contains role\r",
											"pm.test(\"Response contains role\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"role\");\r",
											"});\r",
											"\r",
											"//Test 4: Verify response contains name\r",
											"pm.test(\"Response contains name\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"name\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Matthew Simmons\",\r\n  \"account_number\": \"6745678822\",\r\n  \"password\": \"MS32kingdom!\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://renbank-api.oa.r.appspot.com/auth/login",
									"protocol": "https",
									"host": [
										"renbank-api",
										"oa",
										"r",
										"appspot",
										"com"
									],
									"path": [
										"auth",
										"login"
									]
								},
								"description": "**Test Objective:** Ensure that a user can successfully login with valid input data.\n\n**Expected Results:**\n\n- Status Code: `200 OK`\n    \n- Response contains a success message and the `token`, `role`, and `name` of the currently logged-in user."
							},
							"response": []
						},
						{
							"name": "Invalid Input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Test 1: Verify status code is 400 (Bad Request) for invalid login input\r",
											"pm.test(\"Verify status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//Test 2: Verify 'Name is required' error message\r",
											"pm.test(\"Verify 'Name is required' error\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    const nameError = jsonData.errors.find(err => err.path === 'name');\r",
											"    pm.expect(nameError).to.have.property('msg', 'Name is required.');\r",
											"});\r",
											"\r",
											"//Test 3: Verify 'Account number must be at least 8 digits long' error message\r",
											"pm.test(\"Verify 'Account number must be at least 8 digits long' error\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    const accountNumberError = jsonData.errors.find(err => err.path === 'account_number');\r",
											"    pm.expect(accountNumberError).to.have.property('msg', 'Account number must be at least 8 digits long.');\r",
											"});\r",
											"\r",
											"//Test 5: Verify 'Password must be at least 8 characters long' error message\r",
											"pm.test(\"Verify 'Password must be at least 8 characters long' error\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    const passwordError = jsonData.errors.find(err => err.path === 'password');\r",
											"    pm.expect(passwordError).to.have.property('msg', 'Password must be at least 8 characters long.');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"\",\r\n  \"account_number\": \"7\",\r\n  \"password\": \"MS32kin\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://renbank-api.oa.r.appspot.com/auth/login",
									"protocol": "https",
									"host": [
										"renbank-api",
										"oa",
										"r",
										"appspot",
										"com"
									],
									"path": [
										"auth",
										"login"
									]
								},
								"description": "**Test Objective:** Ensure that a user cannot login with invalid input data.\n\n**Expected Results:**\n\n- Status Code: `400 Bad request`\n    \n- Response contains error messages for each invalid input data."
							},
							"response": []
						},
						{
							"name": "Incorrect Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Test 1: Verify status code is 401 (Unauthorized)\r",
											"pm.test(\"Verify status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"//Test 2: Verify response contains 'Authentication Failed! Incorrect password' message\r",
											"pm.test(\"Response contains 'Authentication Failed! Incorrect password' message\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message', 'Authentication Failed! Incorrect password.');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Matthew Simmons\",\r\n  \"account_number\": \"6745678822\",\r\n  \"password\": \"JTSharks65!\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://renbank-api.oa.r.appspot.com/auth/login",
									"protocol": "https",
									"host": [
										"renbank-api",
										"oa",
										"r",
										"appspot",
										"com"
									],
									"path": [
										"auth",
										"login"
									]
								},
								"description": "**Test Objective:** Ensure that a user cannot login with an incorrect password.\n\n**Expected Results:**\n\n- Status Code: `401 Unauthorized`\n    \n- Response contains an error messages stating `'Authentication Failed! Incorrect password.'`"
							},
							"response": []
						},
						{
							"name": "No User Exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Test 1: Verify status code is 404 (Not found)\r",
											"pm.test(\"Verify status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"//Test 2: Verify response contains 'Authentication Failed! User doesn't exist' message\r",
											"pm.test(\"Response contains 'Authentication Failed! User doesn't exist' message\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message', 'Authentication Failed! User doesn\\'t exist.');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Poppy Jones\",\r\n  \"account_number\": \"674523298\",\r\n  \"password\": \"PJHaywood42$\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://renbank-api.oa.r.appspot.com/auth/login",
									"protocol": "https",
									"host": [
										"renbank-api",
										"oa",
										"r",
										"appspot",
										"com"
									],
									"path": [
										"auth",
										"login"
									]
								},
								"description": "**Test Objective:** Ensure that a user cannot login with an account that doesn't exist.\n\n**Expected Results:**\n\n- Status Code: `404 Not found`\n    \n- Response contains an error messages stating `'Authentication Failed! User doesn't exist.'`"
							},
							"response": []
						}
					],
					"description": "This folder contains all the test cases related to the **user login** (`POST /auth/login`) functionality of the API. The tests in this folder aim to validate that the user login process works as expected for both **valid and invalid** inputs. It includes tests for:\n\n1. **Valid Login**: Verifying that a user can successfully login with valid data, and that the system responds with a **200 status code** and returns necessary details like `token`, `role`, and `name`.\n    \n2. **Incorrect Fields**: Testing how the API handles cases where one or more required fields (like `name`, `account_number`, or `password`) are incorrect, expecting the system to return a **400 status code** and an appropriate error message.\n    \n3. **Incorrect Password**: Testing the scenario where a user tries to login with an incorrect password, expecting the API to return a **401 status code** and an error message (e.g., `Incorrect password`).\n    \n4. **No User Found**: Testing the scenario where a user tries to login with an account that doesn't exist, expecting the API to return a **404 status code** and an error message (e.g., `User doesn't exist`)."
				}
			],
			"description": "This folder contains all the test cases related to the **user authentication** functionality of the API, including **user registration** and **user login** (`POST /auth/register and POST /auth/login`). The tests in this folder aim to validate that the user authentication process works as expected for both valid and invalid inputs."
		},
		{
			"name": "Pay Endpoint",
			"item": [
				{
					"name": "My Payments Tests",
					"item": [
						{
							"name": "My Payments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Test 1: Verify status code is 200 (Successful Response)\r",
											"pm.test(\"Verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjZmZDkxN2U4OWIyM2E3OWFkYThhMjcxIiwicm9sZSI6IkN1c3RvbWVyIiwiaWF0IjoxNzMxMjM4NjM0LCJleHAiOjE3MzEyNDIyMzR9.Edco5dINNPUoKglSq7pCPssxBS4KnxGgt1qIpaWo_E4",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://renbank-api.oa.r.appspot.com/pay/myPayments",
									"protocol": "https",
									"host": [
										"renbank-api",
										"oa",
										"r",
										"appspot",
										"com"
									],
									"path": [
										"pay",
										"myPayments"
									]
								},
								"description": "**Test Objective:** Ensure that a `Customer` can successfully view all their international payments created.\n\n**Expected Results:**\n\n- Status Code: `200 OK`"
							},
							"response": []
						},
						{
							"name": "Invalid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Test 1: Verify status code is 401 (Unauthorized)\r",
											"pm.test(\"Verify status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"//Test 2: Verify response contains 'Token Invalid' message\r",
											"pm.test(\"Response contains 'Token Invalid' message\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"message\", \"Token Invalid!\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://renbank-api.oa.r.appspot.com/pay/myPayments",
									"protocol": "https",
									"host": [
										"renbank-api",
										"oa",
										"r",
										"appspot",
										"com"
									],
									"path": [
										"pay",
										"myPayments"
									]
								},
								"description": "**Test Objective:** Ensure that a user cannot view their own international payments without proper authentication.\n\n**Expected Results:**\n\n- Status Code: `401 (Unauthorized)`\n    \n- Response contains an error messages stating `'Token Invalid!'`"
							},
							"response": []
						},
						{
							"name": "Invalid Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Test 1: Verify status code is 401 (Unauthorized)\r",
											"pm.test(\"Verify status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"//Test 2: Verify response contains 'Payment Retrieval Failed! User's role must be a Customer' message\r",
											"pm.test(\"Response contains 'Payment Retrieval Failed! User's role must be a Customer\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('message', 'Payment Retrieval Failed! User\\'s role must be a Customer.');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjZmZThmNmNhZTg2MDdhOWIyMjUyMmViIiwicm9sZSI6IkVtcGxveWVlIiwiaWF0IjoxNzMxMjQwNDkxLCJleHAiOjE3MzEyNDQwOTF9.WwAjgZnxzXG3X09jgCVIw_lfAmNGEAaRG0uUuUX8sJ0",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://renbank-api.oa.r.appspot.com/pay/myPayments",
									"protocol": "https",
									"host": [
										"renbank-api",
										"oa",
										"r",
										"appspot",
										"com"
									],
									"path": [
										"pay",
										"myPayments"
									]
								},
								"description": "**Test Objective:** Ensure that a user cannot view their own international payments without proper authorization.\n\n**Expected Results:**\n\n- Status Code: `401 (Unauthorized)`\n    \n- Response contains an error messages stating `'Payment Retrieval Failed! User's role must be a Customer.'`"
							},
							"response": []
						}
					],
					"description": "This folder contains all the test cases related to the **viewing of all international payments** **made by a specific user** functionality (`GET /pay/myPayments`) of the API. The tests in this folder are designed to validate that the process of viewing all international payments made by a specific user operates correctly for both valid and invalid inputs. It includes tests for:\n\n1. **My Payments**: Verifying that a user can successfully view all their payments created, and that the system responds with a **200 status code**.\n    \n2. **Invalid Token**: Testing how the API handles cases where a user hasn't been authenticated, expecting the system to return a **401 status code** and an appropriate error message.\n    \n3. **Invalid Role**: Testing how the API handles cases where a user doesn't have the correct privileges, expecting the system to return a **401 status code** and an appropriate error message."
				},
				{
					"name": "Create Payment Tests",
					"item": [
						{
							"name": "Valid Input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Test 1: Verify status code is 201 (Successful creation)\r",
											"pm.test(\"Verify status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Test 2: Verify response contains insertedId within the 'results' object\r",
											"pm.test(\"Response contains insertedId\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.results).to.have.property(\"insertedId\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"amount\": 1000,\r\n    \"currency\": \"US Dollar (USD)\",\r\n    \"provider\": \"SWIFT\",\r\n    \"recipient_name\": \"Mary Loops\",\r\n    \"recipient_account_number\": \"679982327\",\r\n    \"recipient_bank_name\": \"JPMorgan Chase Bank\",\r\n    \"recipient_bank_branch_code\": \"987654\",\r\n    \"swift_code\" : \"CHASUS33\",\r\n    \"verified\" : false,\r\n    \"submit_swift\" : false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://renbank-api.oa.r.appspot.com/pay/createPayment",
									"protocol": "https",
									"host": [
										"renbank-api",
										"oa",
										"r",
										"appspot",
										"com"
									],
									"path": [
										"pay",
										"createPayment"
									]
								}
							},
							"response": []
						}
					],
					"description": "This folder contains all the test cases related to the **user registration** (`POST /auth/register`) functionality of the API. The tests in this folder aim to validate that the user registration process works as expected for both **valid and invalid** inputs. It includes tests for:\n\n1. **Valid Registration**: Verifying that a user can successfully register with valid data, and that the system responds with a **201 status code** and returns necessary details like `insertedId`.\n    \n2. **Incorrect Fields**: Testing how the API handles cases where one or more required fields (like `name`, `id_number`, or `password`) are incorrect, expecting the system to return a **400 status code** and an appropriate error message.\n    \n3. **Duplicate Account**: Testing the scenario where a user tries to register with an already existing `account_number`, expecting the API to return a **409 status code**, and an error message (e.g., `Account number already exists`)."
				}
			],
			"description": "This folder contains all the test cases related to the international payments functionality of the API, including **viewing all payments**, **payment creation**, **verifying payments**, **submitting payments to SWIFT**, and **viewing user-specific payments** (`GET /pay/, POST /pay/createPayment, PATCH /pay/updateVerification/:id, PATCH /pay/updateSubmission/:id, GET /pay/myPayments`) . The tests in this folder aim to validate that the international payment process works as expected for both valid and invalid inputs."
		}
	]
}